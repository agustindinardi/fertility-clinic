from django.db import models
from django.conf import settings
from patients.models import Patient


class Treatment(models.Model):
    """
    Treatment model - represents a fertility treatment for a patient
    """
    
    STATUS_CHOICES = [
        ('ACTIVE', 'Vigente'),
        ('COMPLETED', 'Completado'),
        ('CANCELLED', 'Cancelado'),
    ]
    
    OBJECTIVE_CHOICES = [
        ('PREGNANCY', 'Embarazo'),
        ('OOCYTE_PRESERVATION', 'Preservación de Óvulos'),
        ('EMBRYO_PRESERVATION', 'Preservación de Embriones'),
    ]
    
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE, related_name='treatments')
    doctor = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='treatments_as_doctor')
    
    objective = models.CharField(max_length=30, choices=OBJECTIVE_CHOICES, verbose_name='Objetivo')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='ACTIVE', verbose_name='Estado')
    
    # Stimulation protocol
    stimulation_protocol = models.TextField(blank=True, verbose_name='Protocolo de Estimulación')
    medication_type = models.CharField(max_length=200, blank=True, verbose_name='Tipo de Medicación')
    medication_dose = models.CharField(max_length=100, blank=True, verbose_name='Dosis')
    medication_duration = models.CharField(max_length=100, blank=True, verbose_name='Duración')
    
    # Study results
    oocytes_viable = models.BooleanField(null=True, blank=True, verbose_name='Óvulos Viables')
    sperm_viable = models.BooleanField(null=True, blank=True, verbose_name='Esperma Viable')
    consent_document = models.FileField(upload_to='consents/', null=True, blank=True, verbose_name='Consentimiento Firmado')
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Tratamiento {self.id} - {self.patient} - {self.get_status_display()}"
    
    class Meta:
        verbose_name = 'Tratamiento'
        verbose_name_plural = 'Tratamientos'
        ordering = ['-created_at']


class MonitoringDay(models.Model):
    """
    Monitoring days assigned by doctor for patient follow-up
    """
    
    treatment = models.ForeignKey(Treatment, on_delete=models.CASCADE, related_name='monitoring_days')
    date = models.DateField(verbose_name='Fecha')
    notes = models.TextField(blank=True, verbose_name='Observaciones')
    completed = models.BooleanField(default=False, verbose_name='Completado')
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"Monitoreo - {self.treatment.patient} - {self.date}"
    
    class Meta:
        verbose_name = 'Día de Monitoreo'
        verbose_name_plural = 'Días de Monitoreo'
        ordering = ['date']


class StudyResult(models.Model):
    """
    Study results uploaded by doctor
    """
    
    STUDY_TYPE_CHOICES = [
        ('HORMONAL', 'Hormonal'),
        ('GYNECOLOGICAL', 'Ginecológico'),
        ('PRESURGICAL', 'Prequirúrgico'),
        ('OTHER', 'Otro'),
    ]
    
    treatment = models.ForeignKey(Treatment, on_delete=models.CASCADE, related_name='study_results')
    study_type = models.CharField(max_length=20, choices=STUDY_TYPE_CHOICES, verbose_name='Tipo de Estudio')
    study_name = models.CharField(max_length=200, verbose_name='Nombre del Estudio')
    result_file = models.FileField(upload_to='study_results/', null=True, blank=True, verbose_name='Archivo de Resultado')
    result_text = models.TextField(blank=True, verbose_name='Resultado (Texto)')
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.study_name} - {self.treatment.patient}"
    
    class Meta:
        verbose_name = 'Resultado de Estudio'
        verbose_name_plural = 'Resultados de Estudios'


class MedicalOrder(models.Model):
    """
    Medical orders (studies or prescriptions) generated by doctors
    """
    
    ORDER_TYPE_CHOICES = [
        ('STUDY', 'Orden de Estudio'),
        ('PRESCRIPTION', 'Receta Médica'),
    ]
    
    treatment = models.ForeignKey(Treatment, on_delete=models.CASCADE, related_name='medical_orders')
    order_type = models.CharField(max_length=20, choices=ORDER_TYPE_CHOICES, verbose_name='Tipo de Orden')
    description = models.TextField(verbose_name='Descripción')
    pdf_file = models.FileField(upload_to='medical_orders/', null=True, blank=True, verbose_name='Archivo PDF')
    
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.get_order_type_display()} - {self.treatment.patient} - {self.created_at.date()}"
    
    class Meta:
        verbose_name = 'Orden Médica'
        verbose_name_plural = 'Órdenes Médicas'
        ordering = ['-created_at']


class Payment(models.Model):
    """
    Payment tracking for treatments
    """
    
    PAYER_TYPE_CHOICES = [
        ('PATIENT', 'Paciente'),
        ('INSURANCE', 'Obra Social'),
    ]
    
    treatment = models.ForeignKey(Treatment, on_delete=models.CASCADE, related_name='payments')
    payer_type = models.CharField(max_length=20, choices=PAYER_TYPE_CHOICES, verbose_name='Pagador')
    amount_due = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Monto Adeudado')
    amount_paid = models.DecimalField(max_digits=10, decimal_places=2, default=0, verbose_name='Monto Pagado')
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    @property
    def balance(self):
        return self.amount_due - self.amount_paid
    
    def __str__(self):
        return f"Pago - {self.treatment} - {self.get_payer_type_display()}"
    
    class Meta:
        verbose_name = 'Pago'
        verbose_name_plural = 'Pagos'
